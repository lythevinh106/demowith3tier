// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MydemoFirst.Models;

#nullable disable

namespace MydemoFirst.Models.Migrations
{
    [DbContext(typeof(MyDemoFirstWith3TierContext))]
    partial class MyDemoFirstWith3TierContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.Category.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "category name 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "category name 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "category name 3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "category name 4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "category name 5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "category name 6"
                        },
                        new
                        {
                            Id = 7,
                            Name = "category name 7"
                        },
                        new
                        {
                            Id = 8,
                            Name = "category name 8"
                        },
                        new
                        {
                            Id = 9,
                            Name = "category name 9"
                        },
                        new
                        {
                            Id = 10,
                            Name = "category name 10"
                        },
                        new
                        {
                            Id = 11,
                            Name = "category name 11"
                        },
                        new
                        {
                            Id = 12,
                            Name = "category name 12"
                        },
                        new
                        {
                            Id = 13,
                            Name = "category name 13"
                        },
                        new
                        {
                            Id = 14,
                            Name = "category name 14"
                        },
                        new
                        {
                            Id = 15,
                            Name = "category name 15"
                        });
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.Order.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = 2,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = 3,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = 4,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = 5,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = 6,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = 7,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = 8,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = 9,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = 10,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = 11,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = 12,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = 13,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = 14,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        },
                        new
                        {
                            Id = 15,
                            Status = 0,
                            UserId = "79640b64-94d3-4cb2-89c8-a5fefe3c2051"
                        });
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.ProductOrder.Models.ProductOrder", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductOrders");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            OrderId = 1,
                            Quantity = 45
                        },
                        new
                        {
                            ProductId = 2,
                            OrderId = 2,
                            Quantity = 11
                        },
                        new
                        {
                            ProductId = 3,
                            OrderId = 3,
                            Quantity = 35
                        },
                        new
                        {
                            ProductId = 4,
                            OrderId = 4,
                            Quantity = 18
                        },
                        new
                        {
                            ProductId = 5,
                            OrderId = 5,
                            Quantity = 16
                        },
                        new
                        {
                            ProductId = 6,
                            OrderId = 6,
                            Quantity = 3
                        },
                        new
                        {
                            ProductId = 7,
                            OrderId = 7,
                            Quantity = 11
                        },
                        new
                        {
                            ProductId = 8,
                            OrderId = 8,
                            Quantity = 36
                        },
                        new
                        {
                            ProductId = 9,
                            OrderId = 9,
                            Quantity = 34
                        },
                        new
                        {
                            ProductId = 10,
                            OrderId = 10,
                            Quantity = 27
                        },
                        new
                        {
                            ProductId = 11,
                            OrderId = 11,
                            Quantity = 40
                        },
                        new
                        {
                            ProductId = 12,
                            OrderId = 12,
                            Quantity = 9
                        },
                        new
                        {
                            ProductId = 13,
                            OrderId = 13,
                            Quantity = 24
                        },
                        new
                        {
                            ProductId = 14,
                            OrderId = 14,
                            Quantity = 8
                        },
                        new
                        {
                            ProductId = 15,
                            OrderId = 15,
                            Quantity = 46
                        });
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.Products.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "ProductName 1",
                            Price = 2537m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Name = "ProductName 2",
                            Price = 2538m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Name = "ProductName 3",
                            Price = 2539m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Name = "ProductName 4",
                            Price = 2540m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Name = "ProductName 5",
                            Price = 2541m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            Name = "ProductName 6",
                            Price = 2542m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            Name = "ProductName 7",
                            Price = 2543m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            Name = "ProductName 8",
                            Price = 2544m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            Name = "ProductName 9",
                            Price = 2545m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            Name = "ProductName 10",
                            Price = 2546m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 11,
                            Name = "ProductName 11",
                            Price = 2547m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 12,
                            Name = "ProductName 12",
                            Price = 2548m
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 13,
                            Name = "ProductName 13",
                            Price = 2549m
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 14,
                            Name = "ProductName 14",
                            Price = 2550m
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 15,
                            Name = "ProductName 15",
                            Price = 2551m
                        });
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.Room.Models.Room", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.RoomMember.Models.RoomMember", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomMembers");
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.User.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "79640b64-94d3-4cb2-89c8-a5fefe3c2051",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db8e58d9-e951-4efd-8f0d-abd145ee973c",
                            Email = "user1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "nguyen",
                            LastName = "1",
                            LockoutEnabled = false,
                            PasswordHash = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5535cbfa-2758-4d43-a562-f2b4638db9e9",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.UserRefreshToken.Models.UserRefreshToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MydemoFirst.Models.Modules.User.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MydemoFirst.Models.Modules.User.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MydemoFirst.Models.Modules.User.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MydemoFirst.Models.Modules.User.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.Order.Models.Order", b =>
                {
                    b.HasOne("MydemoFirst.Models.Modules.User.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.ProductOrder.Models.ProductOrder", b =>
                {
                    b.HasOne("MydemoFirst.Models.Modules.Order.Models.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MydemoFirst.Models.Modules.Products.Models.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.Products.Models.Product", b =>
                {
                    b.HasOne("MydemoFirst.Models.Modules.Category.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.RoomMember.Models.RoomMember", b =>
                {
                    b.HasOne("MydemoFirst.Models.Modules.Room.Models.Room", "Room")
                        .WithMany("RoomMembers")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MydemoFirst.Models.Modules.User.Models.User", "User")
                        .WithMany("RoomMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.UserRefreshToken.Models.UserRefreshToken", b =>
                {
                    b.HasOne("MydemoFirst.Models.Modules.User.Models.User", "User")
                        .WithOne("UserRefreshToken")
                        .HasForeignKey("MydemoFirst.Models.Modules.UserRefreshToken.Models.UserRefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.Category.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.Order.Models.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.Products.Models.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.Room.Models.Room", b =>
                {
                    b.Navigation("RoomMembers");
                });

            modelBuilder.Entity("MydemoFirst.Models.Modules.User.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("RoomMembers");

                    b.Navigation("UserRefreshToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
